/*
 * generated by Xtext 2.30.0
 */
package cn.njuics.faasit.dsl.tests;

import cn.njuics.faasit.dsl.faasIt.Block;
import cn.njuics.faasit.dsl.faasIt.Model;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.resource.Resource.Diagnostic;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(FaasItInjectorProvider.class)
public class FaasItParsingTest {
	@Inject
	private ParseHelper<Model> parseHelper;
	
	@Test
	public void loadModel() throws Exception {
		Model result = parseHelper.parse("""
				block A {
					name = {
						age = int
					}
				}
				
				function func1 {}
				""");
		Assert.assertNotNull(result);
		List<Diagnostic> errors = result.eResource().getErrors();
		Assert.assertTrue("Unexpected errors: " + IterableExtensions.join(errors, ", "), errors.isEmpty());
		Assert.assertEquals(2, result.getBlocks().size());

		var block1 = result.getBlocks().get(0);

		Assert.assertEquals("block", block1.getBlock_type());
		Assert.assertEquals("A", block1.getName());
		Assert.assertEquals("name", block1.getProps().get(0).getName());

		{
			var block1_1 = block1.getProps().get(0).getRight();
			Assert.assertTrue(block1_1 instanceof Block);
			Assert.assertEquals("age", ((Block) block1_1).getProps().get(0).getName());
		}
	}
}
